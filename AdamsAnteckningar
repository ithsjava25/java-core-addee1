CATEGORY
--------------------------------
[check]
Should not have any public constructors
Should only be instantiated via its factory method

[check]
Should be created using the 'of' factory method
The category name should match the value provided to the factory method.

[check]
should return the same instance for the same name (flyweight pattern)
Categories with the same name should be the exact same instance to save memory.

[check]
should capitalize the first letter of its name automatically
The category's name should be formatted with an initial capital letter.

[check]
should throw IllegalArgumentException if the name is null
message: Category name can't be null

[check]
should throw IllegalArgumentException if the name is empty
message: Category name can't be blank

[check]
should throw IllegalArgumentException if the name is blank (whitespace)
message: Category name can't be blank

Methods:
[check]
getName()

[check]
of()



WAREHOUSE
--------------------------------
[check]
Should have private constructors. Should not use "new".
Should only be instantiated via factroy method. Prevent multiple instances with the same name.

[check]
Should return the same instance for the same name. (Singleton pattern).
Caching like in Category.

[check]
Check if warehouse is EMPTY when setup is done.
isEmpty must retrun TRUE if warehouse is empty.

[check]
Should throw IllegalArgumentException when adding a null product.
Message: "Product cannot be null."

[check]
Should return unmodified list of products.
Must return a readonly list.
if try to modify -> throw UnsupportedOperationException.

[check]
Should remove an existing product with given ID (UUID ID).
After deleted, warehouse.isEmpty should be true if no products remain.

[check]
Should return empty map when grouping categories on empty warehouse.
getProductsGroupedByCategories should return empty Map if there are no products.

[check]
Should return empty Optional when getting a product by non-existent ID.
getProductById(UUID) should return Optional.empty(() if the product does not exist.

[check]
Should throw NoSuchElementException when updating a non-existent product.
updateProductPrice(UUID, BigDecimal) should throw NoSuchElementException("Product not found with id: " + id").

This has to be fixed after created other classes.
[] !!!!!!!!!!!!!!!!!!!!!!!!!!!!! NEED TO FIX
Should support polymorphism for priductDetails().
Calling product.productDetails() on FoodProduct or ElectronicsProduct should return the correct description string
"Food: Milk, Expires: 2025-12-24"
"Electronics: Laptop, Warranty: 24 months".

[] !!!!!!!!!!!!!!!!!!!!!!!!!!!!! NEED TO FIX
Should find expired products using the Perishable interface.
expiredProduts() should return all Perishable products whose expirationDate is before today.
Should not include non-persihable products.

[] !!!!!!!!!!!!!!!!!!!!!!!!!!!!! NEED TO FIX
Should calculate total shipping cost using Shippable interface.
shippableProducts() should return all products implementing shippable.
Total shipping cost = sum of each products calculateShippingCost().


Methods:
[check] getInstance(String name) - factory method for crearting or getting existing warehouse instance.
[] addProduct(Product product) - adds new product, throws exception if product is null
[] remove(UUID id) - delete a product by its ID if it exists
[] clearProducts() - clear warehouse
[] boolean isEmpty() - returns true if no products are stored
[] getProducts() - returns unmmodified list of all products
[] getProductById(UUID id) - return a product wrapped in optional, or optional.isemtpy if not found.
[] updateProductPrice(UUID id, BigDecimal newPrice) - update price if product exist or throw NoSuchElementException
[] getProductsGroupedByCategories() - groups all products by category and returns empty map if warehouse is empty
[] expiredProducts() - return all expired products implementing perishable
[] shippableProducts() - return all propducts implementing shippable


FOOD PRODUCTS
--------------------------------






ELECTRONICS PRODUCTS
--------------------------------




ELECTRONICS PRODUCTS
--------------------------------